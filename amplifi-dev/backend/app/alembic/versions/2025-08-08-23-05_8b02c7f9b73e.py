"""empty message

Revision ID: 8b02c7f9b73e
Revises: f4cee673fb6b
Create Date: 2025-08-08 23:05:06.881175

"""

from alembic import op
import sqlalchemy as sa
import sqlalchemy_utils
import sqlmodel  # added


# revision identifiers, used by Alembic.
revision = "8b02c7f9b73e"
down_revision = "f0c73caca1af"
branch_labels = None
depends_on = None


def upgrade():
    op.execute("CREATE EXTENSION IF NOT EXISTS pg_trgm")
    
    # ### commands auto generated by Alembic - please adjust! ###
    # Check if table exists before creating
    connection = op.get_bind()
    inspector = sa.inspect(connection)
    
    if 'extracted_entities' not in inspector.get_table_names():
        op.create_table(
            "extracted_entities",
            sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
            sa.Column("updated_at", sa.DateTime(), nullable=True),
            sa.Column("created_at", sa.DateTime(), nullable=True),
            sa.Column("deleted_at", sa.DateTime(), nullable=True),
            sa.Column("graph_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
            sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
            sa.Column("entity_type", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
            sa.Column("description", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
            sa.ForeignKeyConstraint(
                ["graph_id"],
                ["graphs.id"],
            ),
            sa.PrimaryKeyConstraint("id"),
        )
        
        # Create indexes only if table was created
        op.create_index(
            op.f("ix_extracted_entities_entity_type"),
            "extracted_entities",
            ["entity_type"],
            unique=False,
        )
        op.create_index(
            op.f("ix_extracted_entities_graph_id"),
            "extracted_entities",
            ["graph_id"],
            unique=False,
        )
        op.create_index(
            op.f("ix_extracted_entities_id"), "extracted_entities", ["id"], unique=False
        )
        op.create_index(
            op.f("ix_extracted_entities_name"), "extracted_entities", ["name"], unique=False
        )
    
    # Ensure the graphstatus enum includes the new value used by graph extraction flow
    # Note: Postgres cannot drop enum values easily on downgrade; this is intentionally additive-only.
    op.execute("ALTER TYPE graphstatus ADD VALUE IF NOT EXISTS 'ENTITIES_EXTRACTED'")
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_extracted_entities_name"), table_name="extracted_entities")
    op.drop_index(op.f("ix_extracted_entities_id"), table_name="extracted_entities")
    op.drop_index(
        op.f("ix_extracted_entities_graph_id"), table_name="extracted_entities"
    )
    op.drop_index(
        op.f("ix_extracted_entities_entity_type"), table_name="extracted_entities"
    )
    op.drop_table("extracted_entities")
    # ### end Alembic commands ###
