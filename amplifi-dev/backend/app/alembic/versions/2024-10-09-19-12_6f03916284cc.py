"""empty message

Revision ID: 6f03916284cc
Revises: 
Create Date: 2024-10-09 19:12:11.720005

"""

from alembic import op
import sqlalchemy as sa
import sqlalchemy_utils
import sqlmodel  # added


# revision identifiers, used by Alembic.
revision = "6f03916284cc"
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    op.execute("CREATE EXTENSION IF NOT EXISTS pg_trgm")
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "Media",
        sa.Column("title", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("description", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("path", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("deleted_at", sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_Media_id"), "Media", ["id"], unique=False)
    op.create_table(
        "Role",
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("description", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("deleted_at", sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_Role_id"), "Role", ["id"], unique=False)
    op.create_table(
        "UserFollow",
        sa.Column("user_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("target_user_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("deleted_at", sa.DateTime(), nullable=True),
        sa.Column("is_mutual", sa.Boolean(), server_default="0", nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_UserFollow_id"), "UserFollow", ["id"], unique=False)
    op.create_table(
        "chunking_config",
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("deleted_at", sa.DateTime(), nullable=True),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("provider", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("dataset_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_chunking_config_id"), "chunking_config", ["id"], unique=False
    )
    op.create_table(
        "organizations",
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("deleted_at", sa.DateTime(), nullable=True),
        sa.Column("domain", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("description", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_organizations_id"), "organizations", ["id"], unique=False)
    op.create_index(
        op.f("ix_organizations_name"), "organizations", ["name"], unique=False
    )
    op.create_table(
        "ImageMedia",
        sa.Column("file_format", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("width", sa.Integer(), nullable=True),
        sa.Column("height", sa.Integer(), nullable=True),
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("deleted_at", sa.DateTime(), nullable=True),
        sa.Column("media_id", sqlmodel.sql.sqltypes.GUID(), nullable=True),
        sa.ForeignKeyConstraint(
            ["media_id"],
            ["Media.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_ImageMedia_id"), "ImageMedia", ["id"], unique=False)
    op.create_table(
        "default_provider_chunking_config",
        sa.Column("method", sa.String(), nullable=False),
        sa.Column("chunk_size", sa.Integer(), nullable=True),
        sa.Column("chunk_overlap", sa.Integer(), nullable=True),
        sa.Column("max_chunk_size", sa.Integer(), nullable=True),
        sa.Column("chunking_config_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.ForeignKeyConstraint(
            ["chunking_config_id"],
            ["chunking_config.id"],
        ),
        sa.PrimaryKeyConstraint("chunking_config_id"),
        sa.UniqueConstraint("chunking_config_id"),
    )
    op.create_table(
        "unstructured_provider_chunking_config",
        sa.Column("strategy", sa.String(), nullable=False),
        sa.Column("chunking_strategy", sa.String(), nullable=False),
        sa.Column("max_chunk_size", sa.Integer(), nullable=True),
        sa.Column("combine_under_n_chars", sa.Integer(), nullable=True),
        sa.Column("max_characters", sa.Integer(), nullable=True),
        sa.Column("coordinates", sa.Boolean(), nullable=True),
        sa.Column("chunk_overlap", sa.Integer(), nullable=True),
        sa.Column("encoding", sa.String(), nullable=True),
        sa.Column("gz_uncompressed_content_type", sa.String(), nullable=True),
        sa.Column("hi_res_model_name", sa.String(), nullable=True),
        sa.Column("include_orig_elements", sa.Boolean(), nullable=True),
        sa.Column("include_page_breaks", sa.Boolean(), nullable=True),
        sa.Column("multipage_sections", sa.Boolean(), nullable=True),
        sa.Column("new_after_n_chars", sa.Integer(), nullable=True),
        sa.Column("output_format", sa.String(), nullable=True),
        sa.Column("overlap", sa.Integer(), nullable=True),
        sa.Column("overlap_all", sa.Boolean(), nullable=True),
        sa.Column("pdf_infer_table_structure", sa.Boolean(), nullable=True),
        sa.Column("similarity_threshold", sa.Float(), nullable=True),
        sa.Column("split_pdf_concurrency_level", sa.Integer(), nullable=True),
        sa.Column("split_pdf_page", sa.Boolean(), nullable=True),
        sa.Column("starting_page_number", sa.Integer(), nullable=True),
        sa.Column("unique_element_ids", sa.Boolean(), nullable=True),
        sa.Column("xml_keep_tags", sa.Boolean(), nullable=True),
        sa.Column("extract_image_block_types", sa.ARRAY(sa.String()), nullable=True),
        sa.Column("languages", sa.ARRAY(sa.String()), nullable=True),
        sa.Column("ocr_languages", sa.ARRAY(sa.String()), nullable=True),
        sa.Column("skip_infer_table_types", sa.ARRAY(sa.String()), nullable=True),
        sa.Column("chunking_config_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.ForeignKeyConstraint(
            ["chunking_config_id"],
            ["chunking_config.id"],
        ),
        sa.PrimaryKeyConstraint("chunking_config_id"),
        sa.UniqueConstraint("chunking_config_id"),
    )
    op.create_table(
        "workspaces",
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("deleted_at", sa.DateTime(), nullable=True),
        sa.Column("organization_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("description", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("processed_chunks", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["organization_id"],
            ["organizations.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_workspaces_id"), "workspaces", ["id"], unique=False)
    op.create_index(op.f("ix_workspaces_name"), "workspaces", ["name"], unique=False)
    op.create_table(
        "User",
        sa.Column("first_name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("last_name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("email", sa.String(), nullable=True),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("is_superuser", sa.Boolean(), nullable=False),
        sa.Column("birthdate", sa.DateTime(timezone=True), nullable=True),
        sa.Column("role_id", sqlmodel.sql.sqltypes.GUID(), nullable=True),
        sa.Column("phone", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("state", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("country", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("address", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("deleted_at", sa.DateTime(), nullable=True),
        sa.Column(
            "hashed_password", sqlmodel.sql.sqltypes.AutoString(), nullable=False
        ),
        sa.Column("image_id", sqlmodel.sql.sqltypes.GUID(), nullable=True),
        sa.Column("follower_count", sa.BigInteger(), server_default="0", nullable=True),
        sa.Column(
            "following_count", sa.BigInteger(), server_default="0", nullable=True
        ),
        sa.ForeignKeyConstraint(
            ["image_id"],
            ["ImageMedia.id"],
        ),
        sa.ForeignKeyConstraint(
            ["role_id"],
            ["Role.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_User_email"), "User", ["email"], unique=True)
    op.create_index(
        op.f("ix_User_hashed_password"), "User", ["hashed_password"], unique=False
    )
    op.create_index(op.f("ix_User_id"), "User", ["id"], unique=False)
    op.create_table(
        "datasets",
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("description", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("deleted_at", sa.DateTime(), nullable=True),
        sa.Column("workspace_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.ForeignKeyConstraint(
            ["workspace_id"],
            ["workspaces.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_datasets_id"), "datasets", ["id"], unique=False)
    op.create_table(
        "files",
        sa.Column("filename", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("mimetype", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("size", sa.Integer(), nullable=True),
        sa.Column("file_path", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("deleted_at", sa.DateTime(), nullable=True),
        sa.Column("workspace_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.ForeignKeyConstraint(
            ["workspace_id"],
            ["workspaces.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_files_id"), "files", ["id"], unique=False)
    op.create_table(
        "sources",
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("deleted_at", sa.DateTime(), nullable=True),
        sa.Column("workspace_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("source_type", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.ForeignKeyConstraint(
            ["workspace_id"],
            ["workspaces.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_sources_id"), "sources", ["id"], unique=False)
    op.create_table(
        "Group",
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("description", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("deleted_at", sa.DateTime(), nullable=True),
        sa.Column("created_by_id", sqlmodel.sql.sqltypes.GUID(), nullable=True),
        sa.ForeignKeyConstraint(
            ["created_by_id"],
            ["User.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_Group_id"), "Group", ["id"], unique=False)
    op.create_table(
        "Team",
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("headquarters", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("deleted_at", sa.DateTime(), nullable=True),
        sa.Column("created_by_id", sqlmodel.sql.sqltypes.GUID(), nullable=True),
        sa.ForeignKeyConstraint(
            ["created_by_id"],
            ["User.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_Team_id"), "Team", ["id"], unique=False)
    op.create_index(op.f("ix_Team_name"), "Team", ["name"], unique=False)
    op.create_table(
        "aws_s3_storage",
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("deleted_at", sa.DateTime(), nullable=True),
        sa.Column("source_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("bucket_name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("access_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("access_secret", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.ForeignKeyConstraint(
            ["source_id"],
            ["sources.id"],
        ),
        sa.PrimaryKeyConstraint("id", "source_id"),
    )
    op.create_index(
        op.f("ix_aws_s3_storage_id"), "aws_s3_storage", ["id"], unique=False
    )
    op.create_table(
        "azure_storage",
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("deleted_at", sa.DateTime(), nullable=True),
        sa.Column("source_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("container_name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("sas_url", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.ForeignKeyConstraint(
            ["source_id"],
            ["sources.id"],
        ),
        sa.PrimaryKeyConstraint("id", "source_id"),
    )
    op.create_index(op.f("ix_azure_storage_id"), "azure_storage", ["id"], unique=False)
    op.create_table(
        "dataset_file_links",
        sa.Column("dataset_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("file_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.ForeignKeyConstraint(
            ["dataset_id"],
            ["datasets.id"],
        ),
        sa.ForeignKeyConstraint(
            ["file_id"],
            ["files.id"],
        ),
        sa.PrimaryKeyConstraint("dataset_id", "file_id"),
    )
    op.create_table(
        "file_ingestion",
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("deleted_at", sa.DateTime(), nullable=True),
        sa.Column("ingestion_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("file_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("dataset_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column(
            "status",
            sa.Enum(
                "Processing",
                "Failed",
                "Success",
                "Not_Started",
                name="fileingestionstatustype",
            ),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["dataset_id"],
            ["datasets.id"],
        ),
        sa.ForeignKeyConstraint(
            ["file_id"],
            ["files.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_file_ingestion_id"), "file_ingestion", ["id"], unique=False
    )
    op.create_table(
        "Hero",
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("secret_name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("age", sa.Integer(), nullable=True),
        sa.Column("team_id", sqlmodel.sql.sqltypes.GUID(), nullable=True),
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("deleted_at", sa.DateTime(), nullable=True),
        sa.Column("created_by_id", sqlmodel.sql.sqltypes.GUID(), nullable=True),
        sa.ForeignKeyConstraint(
            ["created_by_id"],
            ["User.id"],
        ),
        sa.ForeignKeyConstraint(
            ["team_id"],
            ["Team.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_Hero_age"), "Hero", ["age"], unique=False)
    op.create_index(op.f("ix_Hero_id"), "Hero", ["id"], unique=False)
    op.create_index(op.f("ix_Hero_name"), "Hero", ["name"], unique=False)
    op.create_table(
        "LinkGroupUser",
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("deleted_at", sa.DateTime(), nullable=True),
        sa.Column("group_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("user_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.ForeignKeyConstraint(
            ["group_id"],
            ["Group.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["User.id"],
        ),
        sa.PrimaryKeyConstraint("id", "group_id", "user_id"),
    )
    op.create_index(op.f("ix_LinkGroupUser_id"), "LinkGroupUser", ["id"], unique=False)
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_LinkGroupUser_id"), table_name="LinkGroupUser")
    op.drop_table("LinkGroupUser")
    op.drop_index(op.f("ix_Hero_name"), table_name="Hero")
    op.drop_index(op.f("ix_Hero_id"), table_name="Hero")
    op.drop_index(op.f("ix_Hero_age"), table_name="Hero")
    op.drop_table("Hero")
    op.drop_index(op.f("ix_file_ingestion_id"), table_name="file_ingestion")
    op.drop_table("file_ingestion")
    op.drop_table("dataset_file_links")
    op.drop_index(op.f("ix_azure_storage_id"), table_name="azure_storage")
    op.drop_table("azure_storage")
    op.drop_index(op.f("ix_aws_s3_storage_id"), table_name="aws_s3_storage")
    op.drop_table("aws_s3_storage")
    op.drop_index(op.f("ix_Team_name"), table_name="Team")
    op.drop_index(op.f("ix_Team_id"), table_name="Team")
    op.drop_table("Team")
    op.drop_index(op.f("ix_Group_id"), table_name="Group")
    op.drop_table("Group")
    op.drop_index(op.f("ix_sources_id"), table_name="sources")
    op.drop_table("sources")
    op.drop_index(op.f("ix_files_id"), table_name="files")
    op.drop_table("files")
    op.drop_index(op.f("ix_datasets_id"), table_name="datasets")
    op.drop_table("datasets")
    op.drop_index(op.f("ix_User_id"), table_name="User")
    op.drop_index(op.f("ix_User_hashed_password"), table_name="User")
    op.drop_index(op.f("ix_User_email"), table_name="User")
    op.drop_table("User")
    op.drop_index(op.f("ix_workspaces_name"), table_name="workspaces")
    op.drop_index(op.f("ix_workspaces_id"), table_name="workspaces")
    op.drop_table("workspaces")
    op.drop_table("unstructured_provider_chunking_config")
    op.drop_table("default_provider_chunking_config")
    op.drop_index(op.f("ix_ImageMedia_id"), table_name="ImageMedia")
    op.drop_table("ImageMedia")
    op.drop_index(op.f("ix_organizations_name"), table_name="organizations")
    op.drop_index(op.f("ix_organizations_id"), table_name="organizations")
    op.drop_table("organizations")
    op.drop_index(op.f("ix_chunking_config_id"), table_name="chunking_config")
    op.drop_table("chunking_config")
    op.drop_index(op.f("ix_UserFollow_id"), table_name="UserFollow")
    op.drop_table("UserFollow")
    op.drop_index(op.f("ix_Role_id"), table_name="Role")
    op.drop_table("Role")
    op.drop_index(op.f("ix_Media_id"), table_name="Media")
    op.drop_table("Media")
    # ### end Alembic commands ###
