"""empty message

Revision ID: f0c49b63a063
Revises: 2239985c531a
Create Date: 2025-04-07 11:09:15.557941

"""
from alembic import op
import sqlalchemy as sa
import sqlalchemy_utils
import sqlmodel # added
from sqlalchemy import text, Column, Enum
from sqlalchemy.dialects.postgresql import ENUM


# revision identifiers, used by Alembic.
revision = 'f0c49b63a063'
down_revision = '2239985c531a'
branch_labels = None
depends_on = None


def upgrade():
    op.execute(text("CREATE EXTENSION IF NOT EXISTS pg_trgm")) 
    
    # Check if the enum type already exists and create it only if it doesn't
    conn = op.get_bind()
    result = conn.execute(text("SELECT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'splitfilestatustype')")).scalar()
    if not result:
        # Create the enum type if it doesn't exist
        op.execute(text("CREATE TYPE splitfilestatustype AS ENUM ('Processing', 'Failed', 'Success', 'Not_Started', 'Exception')"))
    
    # ### commands auto generated by Alembic - please adjust! ###
    # Create the file_splits table with all columns except status
    op.create_table('file_splits',
    sa.Column('id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.Column('original_file_id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('dataset_id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('split_index', sa.Integer(), nullable=False),
    sa.Column('total_splits', sa.Integer(), nullable=False),
    sa.Column('split_file_path', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('size', sa.Integer(), nullable=False),
    sa.Column('token_count', sa.Integer(), nullable=False),
    sa.Column('task_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('finished_at', sa.DateTime(), nullable=True),
    sa.Column('file_ingestion_id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('config_hash', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.ForeignKeyConstraint(['dataset_id'], ['datasets.id'], ),
    sa.ForeignKeyConstraint(['file_ingestion_id'], ['file_ingestion.id'], ),
    sa.ForeignKeyConstraint(['original_file_id'], ['files.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    
    # Add the status column separately using direct SQL to avoid automatic type creation
    op.execute(
        text("ALTER TABLE file_splits ADD COLUMN status splitfilestatustype NOT NULL")
    )
    
    op.create_index(op.f('ix_file_splits_id'), 'file_splits', ['id'], unique=False)
    op.add_column('file_ingestion', sa.Column('is_split_ingestion', sa.Boolean(), nullable=True))
    op.add_column('file_ingestion', sa.Column('successful_splits_count', sa.Integer(), nullable=True))
    op.add_column('file_ingestion', sa.Column('total_splits_count', sa.Integer(), nullable=True))
    op.add_column('files', sa.Column('requires_splitting', sa.Boolean(), nullable=True))
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('files', 'requires_splitting')
    op.drop_column('file_ingestion', 'total_splits_count')
    op.drop_column('file_ingestion', 'successful_splits_count')
    op.drop_column('file_ingestion', 'is_split_ingestion')
    op.drop_index(op.f('ix_file_splits_id'), table_name='file_splits')
    op.drop_table('file_splits')
    # ### end Alembic commands ###
