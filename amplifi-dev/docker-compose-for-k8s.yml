services:
  database:
    restart: always
    container_name: database
    image: amplifi-database
    build:
      dockerfile: database.Dockerfile
    env_file: dev.postgres.env
    volumes:
      - db_docker:/data
    ports:
      - 5454:5432 # Remove this on production
    expose:
      - 5432
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    labels:
      kompose.image-pull-policy: "Never"

  fastapi-server:
    container_name: fastapi-server
    image: amplifi-fastapi-server
    build:
      dockerfile: ./backend/k8s.Dockerfile
    command: "sh -c 'alembic upgrade head && fastapi run /code/app/main.py --port 8000'"
    restart: always
    labels:
      kompose.image-pull-policy: "Never"
    volumes:
      - upload-volume:/app/uploads
      - eval-question-answer-volume:/app/eval-question-answer-files
#      - ./backend/app:/code
    expose:
      - 8000
    env_file: dev.env
    depends_on:
      - database
#    links:
#      - caddy-reverse-proxy:storage.localhost

  redis:
    image: redis:alpine
    container_name: redis
    restart: always
    ports:
      - '6379:6379'

  vault:
    image: hashicorp/vault:1.17
    cap_add:
      - IPC_LOCK
    environment:
      VAULT_ADDR: "http://127.0.0.1:8200"
    ports:
      - "8200:8200"
    volumes:
      - vault-volume:/vault/file:rw
      - ./vault:/vault/config:rw
    entrypoint: vault server -config=/vault/config/vault.json

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq_dev
    ports:
      - "5672:5672"  # RabbitMQ main port
      - "15672:15672"  # RabbitMQ management UI port
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq

  celery-worker:
    container_name: celery-worker
    image: amplifi-celery-worker
    env_file: dev.env
    restart: always
    build:
      dockerfile: ./backend/k8s.Dockerfile
    command: "watchfiles 'celery -A app.be_core.celery worker --pool=threads -Q ingestion_queue -l info'" #
    labels:
      kompose.image-pull-policy: "Never"
    depends_on:
      - database
      - rabbitmq
#      - redis


  celery-beat:   #Good for crontab and schedule tasks
    container_name: celery-beat
    image: amplifi-celery-beat
    restart: always
    env_file: dev.env
    build:
      dockerfile: ./backend/k8s.Dockerfile
      args:
        INSTALL_DEV: ${INSTALL_DEV-false}
    command: celery -A app.be_core.celery beat -l info -S sqlalchemy_celery_beat.schedulers:DatabaseScheduler -l info
    labels:
      kompose.image-pull-policy: "Never"
    depends_on:
      - database
      - rabbitmq
#      - redis

#  caddy-reverse-proxy:
#    container_name: caddy-reverse-proxy
#    image: caddy:alpine
#    restart: always
#    env_file: dev.caddy.env
#    ports:
#      - "80:80"
#      - "443:443"
#    volumes:
#      - ./caddy/Caddyfile:/etc/caddy/Caddyfile
#      - caddy_data:/data
#      - caddy_config:/config

  nginx:
    image: nginx:latest
    ports:
      - "8085:8080"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - fastapi-server


volumes:
  db_docker:
  caddy_data:
  caddy_config:
  rabbitmq_data:
  vault-volume:
  upload-volume:
  table-extraction-data-volume:

